using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class InteractionScript : MonoBehaviour
{
    public GameObject interaction;
    bool canInteract=false;
    bool isCoroutinePlaying = false;
    TextMeshProUGUI txt;
    bool finishedShowingText=false;


    public string[] text;

    int iteration = 1;

    private void Start()
    {
        txt = interaction.GetComponentInChildren<TextMeshProUGUI>();
    }
    private void OnTriggerStay2D(Collider2D collision)
    {
        if(collision.CompareTag("Player"))
        {
            canInteract = true;
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.CompareTag("Player"))
        {
            LeaveInteraction();
        }
    }

    private void LeaveInteraction()
    {
        canInteract = false;
        if (isCoroutinePlaying)
            StartCoroutine(HideWindow());
        isCoroutinePlaying = false;
        iteration = 1;
    }

    private void Update()
    {
        if (!canInteract)
            return;
        if(!isCoroutinePlaying&& Input.GetKeyDown(KeyCode.E))
        StartCoroutine(ShowWindow());

        if(isCoroutinePlaying&&iteration>1&&Input.GetKeyDown(KeyCode.E)&&finishedShowingText&& text.Length >= iteration)
        { StartCoroutine(ShowText()); }
        else if(text.Length<iteration&& Input.GetKeyDown(KeyCode.E))
        {
            LeaveInteraction();
        }
    }
    IEnumerator ShowWindow()
    {
        isCoroutinePlaying = true;
        for (int i = -285; i < -139; i++)
        {
            interaction.transform.localPosition = new Vector2(0, i);
            yield return new WaitForSeconds(0.0015f);
        }
        StartCoroutine(ShowText());
    }
    IEnumerator HideWindow()
    {
        isCoroutinePlaying = true;
        for (int i = -139; i > -320; i--)
        {
            interaction.transform.localPosition = new Vector2(0, i);
            yield return new WaitForSeconds(0.0015f);
        }
        TextClear();
    }
    char[] ViewText ;
    IEnumerator ShowText()
    {
        finishedShowingText = false;
        var tx = text[iteration - 1].ToCharArray();
        ViewText = new char[tx.Length];
        for (int i = 0; i < tx.Length; i++)
        {
            ViewText[i] = tx[i];
            yield return new WaitForSeconds(0.025f);
            txt.text = ViewText.ArrayToString();
        }
        iteration++;
        finishedShowingText = true;

    }

    void TextClear()
    {
        txt.text = "";
    }
}
